Backend Vulnerabilities:
------------------------
 ✗ [Low] Use of Hardcoded Credentials
   Path: auth/verifyToken.js, line 13
   Info: Do not hardcode credentials in code. Found hardcoded credential used in send.

 ✗ [Low] Use of Password Hash With Insufficient Computational Effort     
   Path: node_modules/mysql/lib/protocol/Auth.js, line 18
   Info: sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm.

 ✗ [Low] Use of Password Hash With Insufficient Computational Effort     
   Path: node_modules/etag/index.js, line 46
   Info: sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm.

 ✗ [Low] Use of Password Hash With Insufficient Computational Effort     
   Path: node_modules/mysql2/lib/auth_41.js, line 30
   Info: sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm.

 ✗ [Low] Use of Password Hash With Insufficient Computational Effort     
   Path: node_modules/cookie-signature/index.js, line 50
   Info: sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm.

 ✗ [Medium] Information Exposure
   Path: controller/app.js, line 5
   Info: Disable X-Powered-By header for your Express app (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.

 ✗ [Medium] Use of Hardcoded Credentials
   Path: model/databaseConfig.js, line 10
   Info: Do not hardcode passwords in code. Found hardcoded password used in password.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 13      
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 43      
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 71      
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 113     
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 130     
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Cleartext Transmission of Sensitive Information
   Path: node_modules/node-fetch/lib/index.js, line 1478
   Info: _ uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.

 ✗ [Medium] Cleartext Transmission of Sensitive Information
   Path: node_modules/express/lib/application.js, line 617
   Info: http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.

 ✗ [Medium] Information Exposure
   Path: controller/app.js, line 33
   Info: An error object flows to send and is leaked to the attacker. This may disclose important information about the application to an attacker.

 ✗ [Medium] Information Exposure
   Path: controller/app.js, line 53
   Info: An error object flows to send and is leaked to the attacker. This may disclose important information about the application to an attacker.

 ✗ [High] SQL Injection
   Path: controller/app.js, line 140
   Info: Unsanitized input from an HTTP parameter flows into query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.

 ✗ [High] SQL Injection
   Path: controller/app.js, line 266
   Info: Unsanitized input from an HTTP parameter flows into query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.

 ✗ [High] SQL Injection
   Path: controller/app.js, line 173
   Info: Unsanitized input from the HTTP request body flows into query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.

 ✗ [High] SQL Injection
   Path: controller/app.js, line 191
   Info: Unsanitized input from the HTTP request body flows into query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.

 ✗ [High] SQL Injection
   Path: controller/app.js, line 221
   Info: Unsanitized input from the HTTP request body flows into query, where it is used in an SQL query. This may result in an SQL Injection vulnerability.

 ✗ [High] Regular Expression Denial of Service (ReDoS)
   Path: node_modules/express/lib/router/index.js, line 574
   Info: Unsanitized user input from the request URL flows into match, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).

 ✗ [High] Hardcoded Secret
   Path: config.js, line 3
   Info: Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.

 ✗ [High] Hardcoded Secret
   Path: node_modules/jwa/index.js, line 8
   Info: Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.

 ✗ [High] Server-Side Request Forgery (SSRF)
   Path: node_modules/node-fetch/lib/index.js, line 1478
   Info: Unsanitized input from the HTTP request body flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.


Summary:

  25 Code issues found
  9 [High]   11 [Medium]   5 [Low]


Frontend Vulnerabilities:
-------------------------
 ✗ [Low] Use of Password Hash With Insufficient Computational Effort     
   Path: node_modules/etag/index.js, line 46
   Info: sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm.

 ✗ [Low] Use of Password Hash With Insufficient Computational Effort     
   Path: node_modules/cookie-signature/index.js, line 50
   Info: sha1 hash (used in crypto.createHash) is insecure. Consider changing it to a secure hashing algorithm.

 ✗ [Medium] Cross-site Scripting (XSS)
   Path: public/viewlisting.html, line 31
   Info: Unsanitized input from browser storage flows into html, where it is used to dynamically construct the HTML page on client side. This may result in a DOM Based Cross-Site Scripting attack (DOMXSS).

 ✗ [Medium] Cross-site Scripting (XSS)
   Path: public/viewlisting.html, line 106
   Info: Unsanitized input from data from a remote resource flows into html, where it is used to dynamically construct the HTML page on client side. This may result in a DOM Based Cross-Site Scripting attack (DOMXSS).  

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 13      
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 43      
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 71      
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 113     
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Allocation of Resources Without Limits or Throttling
   Path: node_modules/nodejs-file-downloader/testServer.js, line 130     
   Info: This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.

 ✗ [Medium] Cleartext Transmission of Sensitive Information
   Path: node_modules/express/lib/application.js, line 617
   Info: http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.

 ✗ [Medium] Cleartext Transmission of Sensitive Information
   Path: node_modules/node-fetch/lib/index.js, line 1478
   Info: _ uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.

 ✗ [Medium] Information Exposure
   Path: server.js, line 7
   Info: Disable X-Powered-By header for your Express app (consider using Helmet middleware), because it exposes information about the used framework to potential attackers.

 ✗ [High] Regular Expression Denial of Service (ReDoS)
   Path: node_modules/express/lib/router/index.js, line 574
   Info: Unsanitized user input from the request URL flows into match, where it is used to build a regular expression. This may result in a Regular expression Denial of Service attack (reDOS).

 ✗ [High] Server-Side Request Forgery (SSRF)
   Path: node_modules/node-fetch/lib/index.js, line 1478
   Info: Unsanitized input from the HTTP request body flows into _, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.

Summary:

  14 Code issues found
  2 [High]   10 [Medium]   2 [Low]

